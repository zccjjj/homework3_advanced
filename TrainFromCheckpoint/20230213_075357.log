2023/02/13 07:53:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 06:08:21) [GCC 9.4.0]
    CUDA available: True
    numpy_random_seed: 98031798
    GPU 0: NVIDIA GeForce RTX 2080 Ti
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 10.0, V10.0.13
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.7.0+cu101
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.8.1+cu101
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/13 07:53:59 - mmengine - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 512))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 512)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = 'data/VOCdevkit/VOC2012'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 512),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='Pad', size=(512, 512)),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 512), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
dataset_train = dict(
    type='PascalVOCDataset',
    data_root='data/VOCdevkit/VOC2012',
    data_prefix=dict(img_path='JPEGImages', seg_map_path='SegmentationClass'),
    ann_file='ImageSets/Segmentation/train.txt',
    pipeline=[
        dict(type='LoadImageFromFile'),
        dict(type='LoadAnnotations'),
        dict(
            type='RandomResize',
            scale=(2048, 512),
            ratio_range=(0.5, 2.0),
            keep_ratio=True),
        dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
        dict(type='RandomFlip', prob=0.5),
        dict(type='PhotoMetricDistortion'),
        dict(type='Pad', size=(512, 512)),
        dict(type='PackSegInputs')
    ])
dataset_aug = dict(
    type='PascalVOCDataset',
    data_root='data/VOCdevkit/VOC2012',
    data_prefix=dict(
        img_path='JPEGImages', seg_map_path='SegmentationClassAug'),
    ann_file='ImageSets/Segmentation/aug.txt',
    pipeline=[
        dict(type='LoadImageFromFile'),
        dict(type='LoadAnnotations'),
        dict(
            type='RandomResize',
            scale=(2048, 512),
            ratio_range=(0.5, 2.0),
            keep_ratio=True),
        dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
        dict(type='RandomFlip', prob=0.5),
        dict(type='PhotoMetricDistortion'),
        dict(type='Pad', size=(512, 512)),
        dict(type='PackSegInputs')
    ])
train_dataloader = dict(
    batch_size=2,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='ConcatDataset',
        datasets=[
            dict(
                type='PascalVOCDataset',
                data_root='data/VOCdevkit/VOC2012',
                data_prefix=dict(
                    img_path='JPEGImages', seg_map_path='SegmentationClass'),
                ann_file='ImageSets/Segmentation/train.txt',
                pipeline=[
                    dict(type='LoadImageFromFile'),
                    dict(type='LoadAnnotations'),
                    dict(
                        type='RandomResize',
                        scale=(2048, 512),
                        ratio_range=(0.5, 2.0),
                        keep_ratio=True),
                    dict(
                        type='RandomCrop',
                        crop_size=(512, 512),
                        cat_max_ratio=0.75),
                    dict(type='RandomFlip', prob=0.5),
                    dict(type='PhotoMetricDistortion'),
                    dict(type='Pad', size=(512, 512)),
                    dict(type='PackSegInputs')
                ]),
            dict(
                type='PascalVOCDataset',
                data_root='data/VOCdevkit/VOC2012',
                data_prefix=dict(
                    img_path='JPEGImages',
                    seg_map_path='SegmentationClassAug'),
                ann_file='ImageSets/Segmentation/aug.txt',
                pipeline=[
                    dict(type='LoadImageFromFile'),
                    dict(type='LoadAnnotations'),
                    dict(
                        type='RandomResize',
                        scale=(2048, 512),
                        ratio_range=(0.5, 2.0),
                        keep_ratio=True),
                    dict(
                        type='RandomCrop',
                        crop_size=(512, 512),
                        cat_max_ratio=0.75),
                    dict(type='RandomFlip', prob=0.5),
                    dict(type='PhotoMetricDistortion'),
                    dict(type='Pad', size=(512, 512)),
                    dict(type='PackSegInputs')
                ])
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '/root/mmsegmentation/checkpoints/pspnet_r50-d8_512x512_20k_voc12aug_20200617_101958-ed5dfbd9.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=1e-05, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=1e-05, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=20000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=20000, val_interval=100)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=50, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=100),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs/pspnet_vocaug'

2023/02/13 07:53:59 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:53:59 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:01 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:06 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/13 07:54:06 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:06 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/13 07:54:07 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:07 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:08 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 07:54:08 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/02/13 07:54:08 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/02/13 07:54:08 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([21, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([21, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/13 07:54:09 - mmengine - INFO - Load checkpoint from /root/mmsegmentation/checkpoints/pspnet_r50-d8_512x512_20k_voc12aug_20200617_101958-ed5dfbd9.pth
2023/02/13 07:54:09 - mmengine - INFO - Checkpoints will be saved to /root/mmsegmentation/work_dirs/pspnet_vocaug.
2023/02/13 07:54:24 - mmengine - INFO - Iter(train) [   50/20000]  lr: 1.0198e-05  eta: 1:40:54  time: 0.2623  data_time: 0.0057  memory: 5368  loss: 0.6273  decode.loss_ce: 0.3428  decode.acc_seg: 93.0199  aux.loss_ce: 0.2845  aux.acc_seg: 85.6132
2023/02/13 07:54:37 - mmengine - INFO - Iter(train) [  100/20000]  lr: 1.0401e-05  eta: 1:34:12  time: 0.2654  data_time: 0.0056  memory: 3517  loss: 1.3959  decode.loss_ce: 0.8728  decode.acc_seg: 84.7372  aux.loss_ce: 0.5231  aux.acc_seg: 72.4520
2023/02/13 07:54:37 - mmengine - INFO - Saving checkpoint at 100 iterations
2023/02/13 07:54:53 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:06:10  time: 0.2199  data_time: 0.0024  memory: 6845  
2023/02/13 07:55:00 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:04:39  time: 0.0951  data_time: 0.0023  memory: 5132  
2023/02/13 07:55:08 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:04:06  time: 0.1113  data_time: 0.0021  memory: 5815  
2023/02/13 07:55:14 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:03:35  time: 0.1942  data_time: 0.0025  memory: 5988  
2023/02/13 07:55:19 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:03:09  time: 0.1000  data_time: 0.0025  memory: 4957  
2023/02/13 07:55:24 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:02:49  time: 0.0563  data_time: 0.0020  memory: 5472  
2023/02/13 07:55:28 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:02:32  time: 0.0705  data_time: 0.0021  memory: 4788  
2023/02/13 07:55:33 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:02:20  time: 0.1701  data_time: 0.0023  memory: 5986  
2023/02/13 07:55:37 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:02:07  time: 0.1313  data_time: 0.0023  memory: 4272  
2023/02/13 07:55:43 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:02:00  time: 0.1277  data_time: 0.0023  memory: 5303  
2023/02/13 07:55:48 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:01:51  time: 0.0658  data_time: 0.0021  memory: 6327  
2023/02/13 07:55:51 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:01:41  time: 0.0648  data_time: 0.0021  memory: 5470  
2023/02/13 07:55:55 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:01:33  time: 0.0555  data_time: 0.0022  memory: 5130  
2023/02/13 07:55:59 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:01:25  time: 0.1623  data_time: 0.0024  memory: 6159  
2023/02/13 07:56:03 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:01:18  time: 0.0520  data_time: 0.0022  memory: 5815  
2023/02/13 07:56:08 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:01:11  time: 0.1732  data_time: 0.0023  memory: 7014  
2023/02/13 07:56:11 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:01:04  time: 0.0662  data_time: 0.0021  memory: 5813  
2023/02/13 07:56:15 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:58  time: 0.0591  data_time: 0.0022  memory: 4449  
2023/02/13 07:56:18 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:51  time: 0.0559  data_time: 0.0021  memory: 1876  
2023/02/13 07:56:23 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:46  time: 0.1048  data_time: 0.0021  memory: 6329  
2023/02/13 07:56:26 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:40  time: 0.0549  data_time: 0.0021  memory: 2687  
2023/02/13 07:56:30 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:34  time: 0.1374  data_time: 0.0022  memory: 7872  
2023/02/13 07:56:34 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:29  time: 0.0912  data_time: 0.0021  memory: 5642  
2023/02/13 07:56:37 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:24  time: 0.1105  data_time: 0.0022  memory: 5986  
2023/02/13 07:56:41 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:19  time: 0.0610  data_time: 0.0021  memory: 7352  
2023/02/13 07:56:44 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:14  time: 0.0519  data_time: 0.0021  memory: 1890  
2023/02/13 07:56:46 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:09  time: 0.0543  data_time: 0.0021  memory: 1779  
2023/02/13 07:56:49 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:04  time: 0.0524  data_time: 0.0020  memory: 2682  
2023/02/13 07:56:52 - mmengine - INFO - per class results:
2023/02/13 07:56:52 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.59 | 97.56 |
|  aeroplane  | 84.01 | 87.17 |
|   bicycle   | 43.56 | 89.94 |
|     bird    | 85.18 | 89.81 |
|     boat    | 63.99 | 84.79 |
|    bottle   | 76.86 | 86.62 |
|     bus     | 94.28 | 96.49 |
|     car     | 84.52 | 88.39 |
|     cat     | 91.68 | 94.26 |
|    chair    |  38.6 | 55.65 |
|     cow     | 83.27 | 94.04 |
| diningtable | 52.25 | 55.05 |
|     dog     | 87.18 | 93.35 |
|    horse    | 84.03 |  88.1 |
|  motorbike  | 83.84 | 89.25 |
|    person   | 83.97 | 89.76 |
| pottedplant | 58.47 | 72.45 |
|    sheep    | 78.11 | 80.27 |
|     sofa    | 46.15 | 56.01 |
|    train    | 84.69 | 87.03 |
|  tvmonitor  | 65.73 | 72.66 |
+-------------+-------+-------+
2023/02/13 07:56:52 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.2000  mIoU: 74.4700  mAcc: 83.2700
2023/02/13 07:57:06 - mmengine - INFO - Iter(train) [  150/20000]  lr: 1.0604e-05  eta: 1:33:04  time: 0.2744  data_time: 0.0055  memory: 6155  loss: 0.6532  decode.loss_ce: 0.4115  decode.acc_seg: 86.3710  aux.loss_ce: 0.2418  aux.acc_seg: 81.8520
2023/02/13 07:57:20 - mmengine - INFO - Iter(train) [  200/20000]  lr: 1.0806e-05  eta: 1:32:17  time: 0.2750  data_time: 0.0053  memory: 3517  loss: 1.2148  decode.loss_ce: 0.8086  decode.acc_seg: 97.0984  aux.loss_ce: 0.4061  aux.acc_seg: 89.6760
2023/02/13 07:57:20 - mmengine - INFO - Saving checkpoint at 200 iterations
2023/02/13 07:57:25 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:15  time: 0.0521  data_time: 0.0020  memory: 1088  
2023/02/13 07:57:28 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0527  data_time: 0.0022  memory: 994  
2023/02/13 07:57:30 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0565  data_time: 0.0020  memory: 1188  
2023/02/13 07:57:33 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:06  time: 0.0534  data_time: 0.0021  memory: 1040  
2023/02/13 07:57:36 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:03  time: 0.0523  data_time: 0.0021  memory: 1041  
2023/02/13 07:57:38 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0518  data_time: 0.0021  memory: 1029  
2023/02/13 07:57:41 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0525  data_time: 0.0020  memory: 999  
2023/02/13 07:57:44 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0545  data_time: 0.0021  memory: 1038  
2023/02/13 07:57:46 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:52  time: 0.0519  data_time: 0.0021  memory: 1036  
2023/02/13 07:57:49 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0585  data_time: 0.0021  memory: 1252  
2023/02/13 07:57:52 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0529  data_time: 0.0021  memory: 1055  
2023/02/13 07:57:54 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0533  data_time: 0.0021  memory: 1036  
2023/02/13 07:57:57 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0541  data_time: 0.0026  memory: 994  
2023/02/13 07:58:00 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0550  data_time: 0.0021  memory: 1049  
2023/02/13 07:58:02 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0524  data_time: 0.0023  memory: 1029  
2023/02/13 07:58:05 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0591  data_time: 0.0021  memory: 1094  
2023/02/13 07:58:08 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0522  data_time: 0.0020  memory: 1027  
2023/02/13 07:58:10 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0536  data_time: 0.0020  memory: 989  
2023/02/13 07:58:13 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0535  data_time: 0.0020  memory: 989  
2023/02/13 07:58:16 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0526  data_time: 0.0020  memory: 1057  
2023/02/13 07:58:18 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0526  data_time: 0.0020  memory: 1016  
2023/02/13 07:58:21 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0567  data_time: 0.0021  memory: 1142  
2023/02/13 07:58:23 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0525  data_time: 0.0020  memory: 1020  
2023/02/13 07:58:26 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0538  data_time: 0.0020  memory: 1038  
2023/02/13 07:58:29 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0527  data_time: 0.0020  memory: 1108  
2023/02/13 07:58:31 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0523  data_time: 0.0020  memory: 1038  
2023/02/13 07:58:34 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0551  data_time: 0.0022  memory: 1029  
2023/02/13 07:58:37 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0526  data_time: 0.0021  memory: 990  
2023/02/13 07:58:39 - mmengine - INFO - per class results:
2023/02/13 07:58:39 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.56 | 96.69 |
|  aeroplane  | 85.14 | 88.55 |
|   bicycle   | 43.08 | 89.36 |
|     bird    | 86.33 | 92.13 |
|     boat    |  60.6 |  89.5 |
|    bottle   | 76.02 | 88.35 |
|     bus     | 94.41 | 98.45 |
|     car     | 85.82 | 92.28 |
|     cat     | 91.03 | 96.88 |
|    chair    | 36.58 | 57.21 |
|     cow     | 88.07 | 94.04 |
| diningtable | 52.34 |  55.6 |
|     dog     | 84.71 | 91.68 |
|    horse    | 86.51 | 92.44 |
|  motorbike  | 84.24 | 91.35 |
|    person   | 84.13 | 89.64 |
| pottedplant |  56.4 | 74.38 |
|    sheep    | 81.62 | 90.47 |
|     sofa    | 47.93 | 61.77 |
|    train    | 87.11 | 93.87 |
|  tvmonitor  | 63.76 |  75.6 |
+-------------+-------+-------+
2023/02/13 07:58:39 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.1400  mIoU: 74.7300  mAcc: 85.7300
2023/02/13 07:58:53 - mmengine - INFO - Iter(train) [  250/20000]  lr: 1.1009e-05  eta: 1:31:56  time: 0.2766  data_time: 0.0055  memory: 3517  loss: 1.2938  decode.loss_ce: 0.8470  decode.acc_seg: 80.1242  aux.loss_ce: 0.4468  aux.acc_seg: 71.7560
2023/02/13 07:59:07 - mmengine - INFO - Iter(train) [  300/20000]  lr: 1.1212e-05  eta: 1:31:33  time: 0.2768  data_time: 0.0057  memory: 3517  loss: 0.9245  decode.loss_ce: 0.5395  decode.acc_seg: 59.7121  aux.loss_ce: 0.3850  aux.acc_seg: 50.8822
2023/02/13 07:59:07 - mmengine - INFO - Saving checkpoint at 300 iterations
2023/02/13 07:59:12 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:16  time: 0.0532  data_time: 0.0021  memory: 1088  
2023/02/13 07:59:15 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:12  time: 0.0528  data_time: 0.0021  memory: 994  
2023/02/13 07:59:17 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:10  time: 0.0570  data_time: 0.0021  memory: 1188  
2023/02/13 07:59:20 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:07  time: 0.0539  data_time: 0.0021  memory: 1040  
2023/02/13 07:59:23 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:04  time: 0.0527  data_time: 0.0020  memory: 1041  
2023/02/13 07:59:25 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0526  data_time: 0.0025  memory: 1029  
2023/02/13 07:59:28 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0530  data_time: 0.0021  memory: 999  
2023/02/13 07:59:31 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:56  time: 0.0549  data_time: 0.0021  memory: 1038  
2023/02/13 07:59:33 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0523  data_time: 0.0021  memory: 1036  
2023/02/13 07:59:36 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0591  data_time: 0.0022  memory: 1252  
2023/02/13 07:59:39 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:48  time: 0.0532  data_time: 0.0020  memory: 1055  
2023/02/13 07:59:41 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0539  data_time: 0.0022  memory: 1036  
2023/02/13 07:59:44 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0532  data_time: 0.0021  memory: 994  
2023/02/13 07:59:47 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:40  time: 0.0551  data_time: 0.0021  memory: 1049  
2023/02/13 07:59:49 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0520  data_time: 0.0020  memory: 1029  
2023/02/13 07:59:52 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0583  data_time: 0.0021  memory: 1094  
2023/02/13 07:59:55 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:32  time: 0.0523  data_time: 0.0021  memory: 1027  
2023/02/13 07:59:57 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0537  data_time: 0.0021  memory: 989  
2023/02/13 08:00:00 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0536  data_time: 0.0021  memory: 989  
2023/02/13 08:00:03 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0534  data_time: 0.0023  memory: 1057  
2023/02/13 08:00:05 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0528  data_time: 0.0022  memory: 1016  
2023/02/13 08:00:08 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0567  data_time: 0.0022  memory: 1142  
2023/02/13 08:00:11 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0527  data_time: 0.0022  memory: 1020  
2023/02/13 08:00:13 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0542  data_time: 0.0022  memory: 1038  
2023/02/13 08:00:16 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0529  data_time: 0.0021  memory: 1108  
2023/02/13 08:00:19 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0525  data_time: 0.0022  memory: 1038  
2023/02/13 08:00:21 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0551  data_time: 0.0021  memory: 1029  
2023/02/13 08:00:24 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0528  data_time: 0.0022  memory: 990  
2023/02/13 08:00:27 - mmengine - INFO - per class results:
2023/02/13 08:00:27 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.66 | 96.56 |
|  aeroplane  | 87.43 | 92.07 |
|   bicycle   | 42.83 | 85.13 |
|     bird    | 86.32 | 91.17 |
|     boat    | 65.24 | 88.05 |
|    bottle   | 75.55 |  87.4 |
|     bus     | 94.03 | 98.53 |
|     car     | 84.01 | 94.35 |
|     cat     | 91.89 | 97.25 |
|    chair    | 34.84 | 59.26 |
|     cow     | 86.08 | 94.71 |
| diningtable | 58.03 | 64.76 |
|     dog     |  84.9 | 93.23 |
|    horse    |  86.5 | 90.55 |
|  motorbike  | 83.38 | 92.26 |
|    person   | 84.29 | 89.34 |
| pottedplant | 55.24 | 81.36 |
|    sheep    | 78.34 | 81.27 |
|     sofa    | 46.67 |  61.9 |
|    train    | 87.98 | 92.58 |
|  tvmonitor  | 65.22 | 73.63 |
+-------------+-------+-------+
2023/02/13 08:00:27 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.1400  mIoU: 74.8800  mAcc: 85.9700
2023/02/13 08:00:41 - mmengine - INFO - Iter(train) [  350/20000]  lr: 1.1415e-05  eta: 1:31:17  time: 0.2770  data_time: 0.0056  memory: 3517  loss: 1.4875  decode.loss_ce: 1.0043  decode.acc_seg: 94.9734  aux.loss_ce: 0.4832  aux.acc_seg: 71.4035
2023/02/13 08:00:54 - mmengine - INFO - Iter(train) [  400/20000]  lr: 1.1618e-05  eta: 1:30:59  time: 0.2768  data_time: 0.0055  memory: 3517  loss: 0.6675  decode.loss_ce: 0.3514  decode.acc_seg: 91.0691  aux.loss_ce: 0.3161  aux.acc_seg: 80.8087
2023/02/13 08:00:54 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/02/13 08:01:00 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:16  time: 0.0529  data_time: 0.0022  memory: 1088  
2023/02/13 08:01:02 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0526  data_time: 0.0021  memory: 994  
2023/02/13 08:01:05 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:10  time: 0.0568  data_time: 0.0021  memory: 1188  
2023/02/13 08:01:08 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:07  time: 0.0540  data_time: 0.0021  memory: 1040  
2023/02/13 08:01:10 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:04  time: 0.0525  data_time: 0.0021  memory: 1041  
2023/02/13 08:01:13 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0519  data_time: 0.0021  memory: 1029  
2023/02/13 08:01:15 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0528  data_time: 0.0021  memory: 999  
2023/02/13 08:01:18 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:56  time: 0.0549  data_time: 0.0021  memory: 1038  
2023/02/13 08:01:21 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0524  data_time: 0.0022  memory: 1036  
2023/02/13 08:01:24 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0590  data_time: 0.0022  memory: 1252  
2023/02/13 08:01:26 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:48  time: 0.0530  data_time: 0.0020  memory: 1055  
2023/02/13 08:01:29 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0537  data_time: 0.0021  memory: 1036  
2023/02/13 08:01:31 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0535  data_time: 0.0021  memory: 994  
2023/02/13 08:01:34 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0553  data_time: 0.0022  memory: 1049  
2023/02/13 08:01:37 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0519  data_time: 0.0021  memory: 1029  
2023/02/13 08:01:40 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0583  data_time: 0.0021  memory: 1094  
2023/02/13 08:01:42 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0523  data_time: 0.0020  memory: 1027  
2023/02/13 08:01:45 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0540  data_time: 0.0021  memory: 989  
2023/02/13 08:01:47 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0535  data_time: 0.0020  memory: 989  
2023/02/13 08:01:50 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0531  data_time: 0.0020  memory: 1057  
2023/02/13 08:01:53 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0527  data_time: 0.0021  memory: 1016  
2023/02/13 08:01:55 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0569  data_time: 0.0021  memory: 1142  
2023/02/13 08:01:58 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0526  data_time: 0.0021  memory: 1020  
2023/02/13 08:02:01 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0542  data_time: 0.0023  memory: 1038  
2023/02/13 08:02:03 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0537  data_time: 0.0023  memory: 1108  
2023/02/13 08:02:06 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0523  data_time: 0.0021  memory: 1038  
2023/02/13 08:02:09 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0548  data_time: 0.0021  memory: 1029  
2023/02/13 08:02:11 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0527  data_time: 0.0021  memory: 990  
2023/02/13 08:02:14 - mmengine - INFO - per class results:
2023/02/13 08:02:14 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.62 | 96.43 |
|  aeroplane  | 85.27 | 88.04 |
|   bicycle   | 41.86 | 91.52 |
|     bird    | 85.96 | 92.76 |
|     boat    | 62.72 | 89.95 |
|    bottle   |  73.3 | 90.71 |
|     bus     | 94.18 | 98.57 |
|     car     | 85.04 | 93.42 |
|     cat     | 91.79 | 95.62 |
|    chair    | 34.96 | 62.04 |
|     cow     | 85.69 | 91.06 |
| diningtable | 56.77 | 60.43 |
|     dog     | 84.51 | 95.77 |
|    horse    | 85.16 | 91.55 |
|  motorbike  | 83.23 |  91.6 |
|    person   | 84.29 | 90.24 |
| pottedplant | 57.18 | 78.45 |
|    sheep    | 82.29 | 89.01 |
|     sofa    |  46.3 | 57.49 |
|    train    | 87.86 | 93.78 |
|  tvmonitor  | 64.07 | 75.19 |
+-------------+-------+-------+
2023/02/13 08:02:14 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.0800  mIoU: 74.5700  mAcc: 86.3600
2023/02/13 08:02:28 - mmengine - INFO - Iter(train) [  450/20000]  lr: 1.1821e-05  eta: 1:30:43  time: 0.2765  data_time: 0.0057  memory: 3517  loss: 1.1636  decode.loss_ce: 0.7680  decode.acc_seg: 70.5952  aux.loss_ce: 0.3956  aux.acc_seg: 61.2507
2023/02/13 08:02:42 - mmengine - INFO - Iter(train) [  500/20000]  lr: 1.2024e-05  eta: 1:30:25  time: 0.2763  data_time: 0.0056  memory: 3517  loss: 0.8701  decode.loss_ce: 0.4810  decode.acc_seg: 88.7996  aux.loss_ce: 0.3890  aux.acc_seg: 52.9616
2023/02/13 08:02:42 - mmengine - INFO - Saving checkpoint at 500 iterations
2023/02/13 08:02:47 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:16  time: 0.0526  data_time: 0.0022  memory: 1088  
2023/02/13 08:02:49 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0524  data_time: 0.0021  memory: 994  
2023/02/13 08:02:52 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0566  data_time: 0.0021  memory: 1188  
2023/02/13 08:02:55 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:06  time: 0.0536  data_time: 0.0020  memory: 1040  
2023/02/13 08:02:57 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:04  time: 0.0522  data_time: 0.0021  memory: 1041  
2023/02/13 08:03:00 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0517  data_time: 0.0020  memory: 1029  
2023/02/13 08:03:03 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0527  data_time: 0.0021  memory: 999  
2023/02/13 08:03:05 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0549  data_time: 0.0021  memory: 1038  
2023/02/13 08:03:08 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0519  data_time: 0.0020  memory: 1036  
2023/02/13 08:03:11 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0587  data_time: 0.0021  memory: 1252  
2023/02/13 08:03:13 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0528  data_time: 0.0021  memory: 1055  
2023/02/13 08:03:16 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0534  data_time: 0.0020  memory: 1036  
2023/02/13 08:03:19 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0530  data_time: 0.0020  memory: 994  
2023/02/13 08:03:21 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0547  data_time: 0.0020  memory: 1049  
2023/02/13 08:03:24 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0522  data_time: 0.0022  memory: 1029  
2023/02/13 08:03:27 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0582  data_time: 0.0020  memory: 1094  
2023/02/13 08:03:29 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0524  data_time: 0.0021  memory: 1027  
2023/02/13 08:03:32 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0533  data_time: 0.0020  memory: 989  
2023/02/13 08:03:34 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0533  data_time: 0.0020  memory: 989  
2023/02/13 08:03:37 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0525  data_time: 0.0020  memory: 1057  
2023/02/13 08:03:40 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0525  data_time: 0.0020  memory: 1016  
2023/02/13 08:03:42 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0563  data_time: 0.0020  memory: 1142  
2023/02/13 08:03:45 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0525  data_time: 0.0020  memory: 1020  
2023/02/13 08:03:48 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0539  data_time: 0.0020  memory: 1038  
2023/02/13 08:03:50 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0528  data_time: 0.0022  memory: 1108  
2023/02/13 08:03:53 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0522  data_time: 0.0021  memory: 1038  
2023/02/13 08:03:56 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0546  data_time: 0.0021  memory: 1029  
2023/02/13 08:03:58 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0525  data_time: 0.0021  memory: 990  
2023/02/13 08:04:01 - mmengine - INFO - per class results:
2023/02/13 08:04:01 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.61 | 96.57 |
|  aeroplane  | 85.95 | 91.31 |
|   bicycle   | 42.31 | 89.87 |
|     bird    | 86.73 |  93.3 |
|     boat    | 58.01 | 93.07 |
|    bottle   | 75.13 | 89.81 |
|     bus     | 93.78 |  98.6 |
|     car     | 84.92 | 93.05 |
|     cat     | 90.48 | 97.88 |
|    chair    | 36.76 |  51.6 |
|     cow     | 90.07 | 94.96 |
| diningtable | 57.61 | 63.11 |
|     dog     | 84.48 | 91.34 |
|    horse    | 86.68 | 91.19 |
|  motorbike  | 83.49 | 90.55 |
|    person   | 83.83 | 91.86 |
| pottedplant |  58.7 | 74.93 |
|    sheep    | 85.51 | 93.33 |
|     sofa    | 44.49 | 52.57 |
|    train    | 87.71 | 94.26 |
|  tvmonitor  | 62.98 | 76.54 |
+-------------+-------+-------+
2023/02/13 08:04:01 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.2000  mIoU: 74.9200  mAcc: 86.1700
2023/02/13 08:04:15 - mmengine - INFO - Iter(train) [  550/20000]  lr: 1.2227e-05  eta: 1:30:10  time: 0.2761  data_time: 0.0055  memory: 3517  loss: 1.5676  decode.loss_ce: 1.0865  decode.acc_seg: 60.2591  aux.loss_ce: 0.4811  aux.acc_seg: 52.6623
2023/02/13 08:04:29 - mmengine - INFO - Iter(train) [  600/20000]  lr: 1.2430e-05  eta: 1:29:52  time: 0.2759  data_time: 0.0055  memory: 3517  loss: 1.5686  decode.loss_ce: 1.0738  decode.acc_seg: 94.4207  aux.loss_ce: 0.4948  aux.acc_seg: 85.8822
2023/02/13 08:04:29 - mmengine - INFO - Saving checkpoint at 600 iterations
2023/02/13 08:04:34 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:15  time: 0.0525  data_time: 0.0021  memory: 1088  
2023/02/13 08:04:36 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0525  data_time: 0.0021  memory: 994  
2023/02/13 08:04:39 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0566  data_time: 0.0021  memory: 1188  
2023/02/13 08:04:42 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:06  time: 0.0536  data_time: 0.0022  memory: 1040  
2023/02/13 08:04:44 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:03  time: 0.0521  data_time: 0.0021  memory: 1041  
2023/02/13 08:04:47 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0516  data_time: 0.0020  memory: 1029  
2023/02/13 08:04:49 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0525  data_time: 0.0021  memory: 999  
2023/02/13 08:04:52 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0546  data_time: 0.0020  memory: 1038  
2023/02/13 08:04:55 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:52  time: 0.0518  data_time: 0.0021  memory: 1036  
2023/02/13 08:04:57 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0584  data_time: 0.0021  memory: 1252  
2023/02/13 08:05:00 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0528  data_time: 0.0021  memory: 1055  
2023/02/13 08:05:03 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0534  data_time: 0.0021  memory: 1036  
2023/02/13 08:05:05 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0531  data_time: 0.0021  memory: 994  
2023/02/13 08:05:08 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0551  data_time: 0.0021  memory: 1049  
2023/02/13 08:05:11 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0520  data_time: 0.0021  memory: 1029  
2023/02/13 08:05:13 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0580  data_time: 0.0021  memory: 1094  
2023/02/13 08:05:16 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0521  data_time: 0.0021  memory: 1027  
2023/02/13 08:05:19 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0535  data_time: 0.0021  memory: 989  
2023/02/13 08:05:21 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0534  data_time: 0.0021  memory: 989  
2023/02/13 08:05:24 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0525  data_time: 0.0021  memory: 1057  
2023/02/13 08:05:27 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0524  data_time: 0.0021  memory: 1016  
2023/02/13 08:05:29 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0564  data_time: 0.0021  memory: 1142  
2023/02/13 08:05:32 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0523  data_time: 0.0021  memory: 1020  
2023/02/13 08:05:35 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0537  data_time: 0.0021  memory: 1038  
2023/02/13 08:05:37 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0526  data_time: 0.0021  memory: 1108  
2023/02/13 08:05:40 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0521  data_time: 0.0021  memory: 1038  
2023/02/13 08:05:43 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0546  data_time: 0.0021  memory: 1029  
2023/02/13 08:05:45 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0525  data_time: 0.0021  memory: 990  
2023/02/13 08:05:48 - mmengine - INFO - per class results:
2023/02/13 08:05:48 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.57 | 96.59 |
|  aeroplane  | 86.77 | 89.37 |
|   bicycle   | 42.96 | 86.94 |
|     bird    | 85.98 | 91.57 |
|     boat    | 67.94 | 86.49 |
|    bottle   | 73.11 | 90.76 |
|     bus     | 93.73 | 98.76 |
|     car     | 84.18 | 94.08 |
|     cat     | 91.95 | 96.18 |
|    chair    | 36.18 | 57.33 |
|     cow     | 86.25 | 91.01 |
| diningtable | 54.26 | 57.97 |
|     dog     | 86.34 | 93.49 |
|    horse    | 85.66 | 92.73 |
|  motorbike  | 80.24 | 92.72 |
|    person   |  83.8 | 91.57 |
| pottedplant | 59.55 | 74.85 |
|    sheep    |  82.1 | 88.56 |
|     sofa    | 46.97 | 59.06 |
|    train    | 88.16 | 92.79 |
|  tvmonitor  | 61.75 |  73.8 |
+-------------+-------+-------+
2023/02/13 08:05:48 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.1500  mIoU: 74.8300  mAcc: 85.5500
2023/02/13 08:06:02 - mmengine - INFO - Iter(train) [  650/20000]  lr: 1.2633e-05  eta: 1:29:37  time: 0.2764  data_time: 0.0056  memory: 3517  loss: 0.7128  decode.loss_ce: 0.4001  decode.acc_seg: 83.1261  aux.loss_ce: 0.3128  aux.acc_seg: 70.7499
2023/02/13 08:06:15 - mmengine - INFO - Iter(train) [  700/20000]  lr: 1.2836e-05  eta: 1:29:21  time: 0.2759  data_time: 0.0056  memory: 3517  loss: 1.0295  decode.loss_ce: 0.6754  decode.acc_seg: 56.9796  aux.loss_ce: 0.3541  aux.acc_seg: 56.4232
2023/02/13 08:06:15 - mmengine - INFO - Saving checkpoint at 700 iterations
2023/02/13 08:06:20 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:14  time: 0.0526  data_time: 0.0022  memory: 1088  
2023/02/13 08:06:23 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0524  data_time: 0.0021  memory: 994  
2023/02/13 08:06:26 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0567  data_time: 0.0022  memory: 1188  
2023/02/13 08:06:28 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:06  time: 0.0535  data_time: 0.0021  memory: 1040  
2023/02/13 08:06:31 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:03  time: 0.0522  data_time: 0.0020  memory: 1041  
2023/02/13 08:06:34 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0521  data_time: 0.0021  memory: 1029  
2023/02/13 08:06:36 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0530  data_time: 0.0021  memory: 999  
2023/02/13 08:06:39 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0550  data_time: 0.0025  memory: 1038  
2023/02/13 08:06:42 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0523  data_time: 0.0022  memory: 1036  
2023/02/13 08:06:44 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0582  data_time: 0.0021  memory: 1252  
2023/02/13 08:06:47 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0529  data_time: 0.0021  memory: 1055  
2023/02/13 08:06:50 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0534  data_time: 0.0021  memory: 1036  
2023/02/13 08:06:52 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0531  data_time: 0.0021  memory: 994  
2023/02/13 08:06:55 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0548  data_time: 0.0021  memory: 1049  
2023/02/13 08:06:58 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0517  data_time: 0.0021  memory: 1029  
2023/02/13 08:07:00 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0581  data_time: 0.0021  memory: 1094  
2023/02/13 08:07:03 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0522  data_time: 0.0021  memory: 1027  
2023/02/13 08:07:06 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0535  data_time: 0.0021  memory: 989  
2023/02/13 08:07:08 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0534  data_time: 0.0021  memory: 989  
2023/02/13 08:07:11 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0527  data_time: 0.0022  memory: 1057  
2023/02/13 08:07:14 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0525  data_time: 0.0021  memory: 1016  
2023/02/13 08:07:16 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0565  data_time: 0.0021  memory: 1142  
2023/02/13 08:07:19 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0523  data_time: 0.0021  memory: 1020  
2023/02/13 08:07:21 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0540  data_time: 0.0021  memory: 1038  
2023/02/13 08:07:24 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0526  data_time: 0.0020  memory: 1108  
2023/02/13 08:07:27 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0520  data_time: 0.0021  memory: 1038  
2023/02/13 08:07:30 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0547  data_time: 0.0021  memory: 1029  
2023/02/13 08:07:32 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0526  data_time: 0.0021  memory: 990  
2023/02/13 08:07:35 - mmengine - INFO - per class results:
2023/02/13 08:07:35 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.43 |  95.9 |
|  aeroplane  | 86.81 | 95.01 |
|   bicycle   | 43.01 | 90.77 |
|     bird    | 85.86 | 93.26 |
|     boat    | 63.75 | 90.58 |
|    bottle   | 73.43 | 90.36 |
|     bus     | 92.52 | 98.86 |
|     car     | 83.53 | 94.68 |
|     cat     | 90.05 | 97.75 |
|    chair    | 36.41 | 60.66 |
|     cow     | 88.02 | 95.09 |
| diningtable | 58.18 |  63.2 |
|     dog     |  83.9 | 89.18 |
|    horse    | 87.29 | 94.03 |
|  motorbike  | 81.62 | 91.26 |
|    person   | 84.17 | 90.33 |
| pottedplant | 58.14 | 75.26 |
|    sheep    |  83.2 | 91.81 |
|     sofa    | 48.94 | 68.96 |
|    train    | 86.41 | 94.59 |
|  tvmonitor  | 63.27 | 77.63 |
+-------------+-------+-------+
2023/02/13 08:07:35 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.9900  mIoU: 74.8500  mAcc: 87.5800
2023/02/13 08:07:49 - mmengine - INFO - Iter(train) [  750/20000]  lr: 1.3039e-05  eta: 1:29:06  time: 0.2761  data_time: 0.0055  memory: 3517  loss: 1.9315  decode.loss_ce: 1.2987  decode.acc_seg: 62.8847  aux.loss_ce: 0.6328  aux.acc_seg: 57.8512
2023/02/13 08:08:02 - mmengine - INFO - Iter(train) [  800/20000]  lr: 1.3243e-05  eta: 1:28:50  time: 0.2759  data_time: 0.0058  memory: 3517  loss: 0.9661  decode.loss_ce: 0.5677  decode.acc_seg: 81.8129  aux.loss_ce: 0.3985  aux.acc_seg: 70.8717
2023/02/13 08:08:02 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/02/13 08:08:07 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:15  time: 0.0532  data_time: 0.0023  memory: 1088  
2023/02/13 08:08:10 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0526  data_time: 0.0021  memory: 994  
2023/02/13 08:08:13 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0566  data_time: 0.0021  memory: 1188  
2023/02/13 08:08:15 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:07  time: 0.0536  data_time: 0.0021  memory: 1040  
2023/02/13 08:08:18 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:04  time: 0.0522  data_time: 0.0021  memory: 1041  
2023/02/13 08:08:21 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0521  data_time: 0.0022  memory: 1029  
2023/02/13 08:08:23 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0528  data_time: 0.0021  memory: 999  
2023/02/13 08:08:26 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0547  data_time: 0.0021  memory: 1038  
2023/02/13 08:08:29 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0520  data_time: 0.0021  memory: 1036  
2023/02/13 08:08:31 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0587  data_time: 0.0021  memory: 1252  
2023/02/13 08:08:34 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0532  data_time: 0.0021  memory: 1055  
2023/02/13 08:08:37 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0535  data_time: 0.0021  memory: 1036  
2023/02/13 08:08:39 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0531  data_time: 0.0021  memory: 994  
2023/02/13 08:08:42 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0547  data_time: 0.0021  memory: 1049  
2023/02/13 08:08:45 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0520  data_time: 0.0022  memory: 1029  
2023/02/13 08:08:47 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0580  data_time: 0.0021  memory: 1094  
2023/02/13 08:08:50 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0523  data_time: 0.0021  memory: 1027  
2023/02/13 08:08:53 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0536  data_time: 0.0020  memory: 989  
2023/02/13 08:08:55 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0536  data_time: 0.0021  memory: 989  
2023/02/13 08:08:58 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0527  data_time: 0.0021  memory: 1057  
2023/02/13 08:09:01 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0525  data_time: 0.0021  memory: 1016  
2023/02/13 08:09:03 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0563  data_time: 0.0021  memory: 1142  
2023/02/13 08:09:06 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0523  data_time: 0.0021  memory: 1020  
2023/02/13 08:09:09 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0539  data_time: 0.0021  memory: 1038  
2023/02/13 08:09:11 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0526  data_time: 0.0021  memory: 1108  
2023/02/13 08:09:14 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0520  data_time: 0.0021  memory: 1038  
2023/02/13 08:09:17 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0544  data_time: 0.0020  memory: 1029  
2023/02/13 08:09:19 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0526  data_time: 0.0021  memory: 990  
2023/02/13 08:09:22 - mmengine - INFO - per class results:
2023/02/13 08:09:22 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.56 | 96.67 |
|  aeroplane  | 87.98 | 93.56 |
|   bicycle   | 42.24 | 91.36 |
|     bird    | 86.31 | 92.21 |
|     boat    | 66.39 | 83.07 |
|    bottle   |  75.0 | 87.86 |
|     bus     | 94.18 | 98.43 |
|     car     | 85.49 | 91.14 |
|     cat     | 92.06 | 96.91 |
|    chair    | 35.29 | 58.74 |
|     cow     | 87.91 |  92.8 |
| diningtable | 57.39 | 61.46 |
|     dog     | 85.51 | 92.29 |
|    horse    | 86.51 | 93.21 |
|  motorbike  | 82.66 | 92.25 |
|    person   | 83.42 |  89.0 |
| pottedplant | 58.64 | 75.59 |
|    sheep    | 82.72 | 87.95 |
|     sofa    | 47.33 | 62.05 |
|    train    | 88.57 | 93.44 |
|  tvmonitor  | 63.41 | 76.87 |
+-------------+-------+-------+
2023/02/13 08:09:22 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 94.1700  mIoU: 75.3600  mAcc: 86.0400
2023/02/13 08:09:36 - mmengine - INFO - Iter(train) [  850/20000]  lr: 1.3446e-05  eta: 1:28:35  time: 0.2759  data_time: 0.0055  memory: 3517  loss: 0.5883  decode.loss_ce: 0.3594  decode.acc_seg: 98.4744  aux.loss_ce: 0.2289  aux.acc_seg: 91.9758
2023/02/13 08:09:49 - mmengine - INFO - Iter(train) [  900/20000]  lr: 1.3649e-05  eta: 1:28:19  time: 0.2755  data_time: 0.0054  memory: 3517  loss: 1.0398  decode.loss_ce: 0.6335  decode.acc_seg: 61.7236  aux.loss_ce: 0.4063  aux.acc_seg: 51.1090
2023/02/13 08:09:49 - mmengine - INFO - Saving checkpoint at 900 iterations
2023/02/13 08:09:54 - mmengine - INFO - Iter(val) [  50/1449]    eta: 0:01:15  time: 0.0525  data_time: 0.0020  memory: 1088  
2023/02/13 08:09:57 - mmengine - INFO - Iter(val) [ 100/1449]    eta: 0:01:11  time: 0.0528  data_time: 0.0021  memory: 994  
2023/02/13 08:10:00 - mmengine - INFO - Iter(val) [ 150/1449]    eta: 0:01:09  time: 0.0567  data_time: 0.0021  memory: 1188  
2023/02/13 08:10:02 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:01:07  time: 0.0536  data_time: 0.0020  memory: 1040  
2023/02/13 08:10:05 - mmengine - INFO - Iter(val) [ 250/1449]    eta: 0:01:04  time: 0.0527  data_time: 0.0021  memory: 1041  
2023/02/13 08:10:08 - mmengine - INFO - Iter(val) [ 300/1449]    eta: 0:01:01  time: 0.0520  data_time: 0.0021  memory: 1029  
2023/02/13 08:10:10 - mmengine - INFO - Iter(val) [ 350/1449]    eta: 0:00:58  time: 0.0528  data_time: 0.0021  memory: 999  
2023/02/13 08:10:13 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:55  time: 0.0547  data_time: 0.0021  memory: 1038  
2023/02/13 08:10:16 - mmengine - INFO - Iter(val) [ 450/1449]    eta: 0:00:53  time: 0.0534  data_time: 0.0023  memory: 1036  
2023/02/13 08:10:18 - mmengine - INFO - Iter(val) [ 500/1449]    eta: 0:00:50  time: 0.0593  data_time: 0.0022  memory: 1252  
2023/02/13 08:10:21 - mmengine - INFO - Iter(val) [ 550/1449]    eta: 0:00:47  time: 0.0530  data_time: 0.0021  memory: 1055  
2023/02/13 08:10:24 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0534  data_time: 0.0021  memory: 1036  
2023/02/13 08:10:26 - mmengine - INFO - Iter(val) [ 650/1449]    eta: 0:00:42  time: 0.0531  data_time: 0.0021  memory: 994  
2023/02/13 08:10:29 - mmengine - INFO - Iter(val) [ 700/1449]    eta: 0:00:39  time: 0.0550  data_time: 0.0021  memory: 1049  
2023/02/13 08:10:32 - mmengine - INFO - Iter(val) [ 750/1449]    eta: 0:00:37  time: 0.0518  data_time: 0.0021  memory: 1029  
2023/02/13 08:10:34 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.0582  data_time: 0.0021  memory: 1094  
2023/02/13 08:10:37 - mmengine - INFO - Iter(val) [ 850/1449]    eta: 0:00:31  time: 0.0523  data_time: 0.0021  memory: 1027  
2023/02/13 08:10:40 - mmengine - INFO - Iter(val) [ 900/1449]    eta: 0:00:29  time: 0.0536  data_time: 0.0021  memory: 989  
2023/02/13 08:10:42 - mmengine - INFO - Iter(val) [ 950/1449]    eta: 0:00:26  time: 0.0535  data_time: 0.0020  memory: 989  
2023/02/13 08:10:45 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:23  time: 0.0527  data_time: 0.0020  memory: 1057  
2023/02/13 08:10:48 - mmengine - INFO - Iter(val) [1050/1449]    eta: 0:00:21  time: 0.0524  data_time: 0.0020  memory: 1016  
2023/02/13 08:10:50 - mmengine - INFO - Iter(val) [1100/1449]    eta: 0:00:18  time: 0.0565  data_time: 0.0021  memory: 1142  
2023/02/13 08:10:53 - mmengine - INFO - Iter(val) [1150/1449]    eta: 0:00:15  time: 0.0524  data_time: 0.0021  memory: 1020  
2023/02/13 08:10:56 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:13  time: 0.0544  data_time: 0.0025  memory: 1038  
2023/02/13 08:10:58 - mmengine - INFO - Iter(val) [1250/1449]    eta: 0:00:10  time: 0.0529  data_time: 0.0022  memory: 1108  
2023/02/13 08:11:01 - mmengine - INFO - Iter(val) [1300/1449]    eta: 0:00:07  time: 0.0523  data_time: 0.0022  memory: 1038  
2023/02/13 08:11:04 - mmengine - INFO - Iter(val) [1350/1449]    eta: 0:00:05  time: 0.0548  data_time: 0.0021  memory: 1029  
2023/02/13 08:11:06 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:02  time: 0.0528  data_time: 0.0021  memory: 990  
2023/02/13 08:11:09 - mmengine - INFO - per class results:
2023/02/13 08:11:09 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 93.19 | 96.05 |
|  aeroplane  | 84.05 | 92.82 |
|   bicycle   | 41.74 | 88.57 |
|     bird    | 85.09 | 91.54 |
|     boat    | 61.68 | 90.81 |
|    bottle   | 74.38 | 87.75 |
|     bus     | 92.99 | 98.69 |
|     car     | 84.28 | 91.49 |
|     cat     | 89.01 |  97.8 |
|    chair    | 34.56 |  60.7 |
|     cow     | 84.65 | 87.91 |
| diningtable |  49.5 | 51.76 |
|     dog     | 81.83 | 93.24 |
|    horse    | 83.43 | 93.64 |
|  motorbike  | 83.12 |  91.6 |
|    person   | 83.61 | 91.22 |
| pottedplant | 56.89 | 77.53 |
|    sheep    | 83.62 | 91.37 |
|     sofa    | 46.37 | 59.99 |
|    train    | 87.19 | 92.95 |
|  tvmonitor  | 61.85 | 71.56 |
+-------------+-------+-------+
2023/02/13 08:11:09 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 93.7100  mIoU: 73.4800  mAcc: 85.6700
2023/02/13 08:11:23 - mmengine - INFO - Iter(train) [  950/20000]  lr: 1.3853e-05  eta: 1:28:06  time: 0.2767  data_time: 0.0056  memory: 3517  loss: 0.8859  decode.loss_ce: 0.5657  decode.acc_seg: 92.4423  aux.loss_ce: 0.3202  aux.acc_seg: 89.3329
